syntax = "proto3";
package overlay;
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
option go_package = "github.com/girivad/go-chord/overlay";

message Value{
    google.protobuf.Any val = 1;
}

message KVMap{
    map<string, Value> kvmap = 1;
}

message IP{
    google.protobuf.StringValue ip = 1;
}

message Hash{
    google.protobuf.Int64Value hash = 1;
}

// getPredecessor {} => {IP: string}
// updatePredecessor {IP: string} => {}
service Predecessor{
    rpc getPredecessor(google.protobuf.Empty) returns (IP){}
    rpc updatePredecessor(IP) returns (google.protobuf.Empty){}
}

// findSuccessor {hash: int} => {IP: string}
service Lookup{
    rpc findSuccessor(Hash) returns (IP){}
}

// check {} => {}
service Check{
    rpc liveCheck(google.protobuf.Empty) returns (google.protobuf.Empty){}
}

// transferKeys
service Data{
    rpc transferData(KVMap) returns (google.protobuf.Empty){}
}